
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN DIVIDE ELSE EQ GT ID IF INT LBRACE LPAREN LT MINUS NUMBER PLUS PRINT RBRACE RPAREN SEMICOLON STRING STRING_KW TIMESprogram : statement_liststatement_list : statement\n                      | statement_list statementstatement : declaration\n                 | assignment\n                 | if_stmt\n                 | print_stmtdeclaration : INT ID SEMICOLON\n                   | INT ID ASSIGN expression SEMICOLON\n                   | STRING_KW ID ASSIGN STRING SEMICOLONassignment : ID ASSIGN expression SEMICOLONif_stmt : IF LPAREN expression RPAREN LBRACE statement_list RBRACE\n               | IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACEprint_stmt : PRINT LPAREN expression RPAREN SEMICOLONexpression : NUMBER\n                  | ID\n                  | STRING\n                  | binary_opbinary_op : expression PLUS expression\n                 | expression MINUS expression\n                 | expression TIMES expression\n                 | expression DIVIDE expression\n                 | expression GT expression\n                 | expression LT expression\n                 | expression EQ expression'
    
_lr_action_items = {'INT':([0,2,3,4,5,6,7,13,19,30,41,49,50,51,52,53,55,56,57,],[8,8,-2,-4,-5,-6,-7,-3,-8,-11,-9,-10,8,-14,8,-12,8,8,-13,]),'STRING_KW':([0,2,3,4,5,6,7,13,19,30,41,49,50,51,52,53,55,56,57,],[10,10,-2,-4,-5,-6,-7,-3,-8,-11,-9,-10,10,-14,10,-12,10,10,-13,]),'ID':([0,2,3,4,5,6,7,8,10,13,15,17,18,19,20,30,31,32,33,34,35,36,37,41,49,50,51,52,53,55,56,57,],[9,9,-2,-4,-5,-6,-7,14,16,-3,21,21,21,-8,21,-11,21,21,21,21,21,21,21,-9,-10,9,-14,9,-12,9,9,-13,]),'IF':([0,2,3,4,5,6,7,13,19,30,41,49,50,51,52,53,55,56,57,],[11,11,-2,-4,-5,-6,-7,-3,-8,-11,-9,-10,11,-14,11,-12,11,11,-13,]),'PRINT':([0,2,3,4,5,6,7,13,19,30,41,49,50,51,52,53,55,56,57,],[12,12,-2,-4,-5,-6,-7,-3,-8,-11,-9,-10,12,-14,12,-12,12,12,-13,]),'$end':([1,2,3,4,5,6,7,13,19,30,41,49,51,53,57,],[0,-1,-2,-4,-5,-6,-7,-3,-8,-11,-9,-10,-14,-12,-13,]),'RBRACE':([3,4,5,6,7,13,19,30,41,49,51,52,53,56,57,],[-2,-4,-5,-6,-7,-3,-8,-11,-9,-10,-14,53,-12,57,-13,]),'ASSIGN':([9,14,16,],[15,20,26,]),'LPAREN':([11,12,],[17,18,]),'SEMICOLON':([14,21,22,23,24,25,29,38,40,42,43,44,45,46,47,48,],[19,-16,30,-15,-17,-18,41,49,51,-19,-20,-21,-22,-23,-24,-25,]),'NUMBER':([15,17,18,20,31,32,33,34,35,36,37,],[23,23,23,23,23,23,23,23,23,23,23,]),'STRING':([15,17,18,20,26,31,32,33,34,35,36,37,],[24,24,24,24,38,24,24,24,24,24,24,24,]),'PLUS':([21,22,23,24,25,27,28,29,42,43,44,45,46,47,48,],[-16,31,-15,-17,-18,31,31,31,31,31,31,31,31,31,31,]),'MINUS':([21,22,23,24,25,27,28,29,42,43,44,45,46,47,48,],[-16,32,-15,-17,-18,32,32,32,32,32,32,32,32,32,32,]),'TIMES':([21,22,23,24,25,27,28,29,42,43,44,45,46,47,48,],[-16,33,-15,-17,-18,33,33,33,33,33,33,33,33,33,33,]),'DIVIDE':([21,22,23,24,25,27,28,29,42,43,44,45,46,47,48,],[-16,34,-15,-17,-18,34,34,34,34,34,34,34,34,34,34,]),'GT':([21,22,23,24,25,27,28,29,42,43,44,45,46,47,48,],[-16,35,-15,-17,-18,35,35,35,35,35,35,35,35,35,35,]),'LT':([21,22,23,24,25,27,28,29,42,43,44,45,46,47,48,],[-16,36,-15,-17,-18,36,36,36,36,36,36,36,36,36,36,]),'EQ':([21,22,23,24,25,27,28,29,42,43,44,45,46,47,48,],[-16,37,-15,-17,-18,37,37,37,37,37,37,37,37,37,37,]),'RPAREN':([21,23,24,25,27,28,42,43,44,45,46,47,48,],[-16,-15,-17,-18,39,40,-19,-20,-21,-22,-23,-24,-25,]),'LBRACE':([39,54,],[50,55,]),'ELSE':([53,],[54,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,50,55,],[2,52,56,]),'statement':([0,2,50,52,55,56,],[3,13,3,13,3,13,]),'declaration':([0,2,50,52,55,56,],[4,4,4,4,4,4,]),'assignment':([0,2,50,52,55,56,],[5,5,5,5,5,5,]),'if_stmt':([0,2,50,52,55,56,],[6,6,6,6,6,6,]),'print_stmt':([0,2,50,52,55,56,],[7,7,7,7,7,7,]),'expression':([15,17,18,20,31,32,33,34,35,36,37,],[22,27,28,29,42,43,44,45,46,47,48,]),'binary_op':([15,17,18,20,31,32,33,34,35,36,37,],[25,25,25,25,25,25,25,25,25,25,25,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','syntax.py',88),
  ('statement_list -> statement','statement_list',1,'p_statement_list','syntax.py',92),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','syntax.py',93),
  ('statement -> declaration','statement',1,'p_statement','syntax.py',100),
  ('statement -> assignment','statement',1,'p_statement','syntax.py',101),
  ('statement -> if_stmt','statement',1,'p_statement','syntax.py',102),
  ('statement -> print_stmt','statement',1,'p_statement','syntax.py',103),
  ('declaration -> INT ID SEMICOLON','declaration',3,'p_declaration','syntax.py',107),
  ('declaration -> INT ID ASSIGN expression SEMICOLON','declaration',5,'p_declaration','syntax.py',108),
  ('declaration -> STRING_KW ID ASSIGN STRING SEMICOLON','declaration',5,'p_declaration','syntax.py',109),
  ('assignment -> ID ASSIGN expression SEMICOLON','assignment',4,'p_assignment','syntax.py',121),
  ('if_stmt -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE','if_stmt',7,'p_if_stmt','syntax.py',125),
  ('if_stmt -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE','if_stmt',11,'p_if_stmt','syntax.py',126),
  ('print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON','print_stmt',5,'p_print_stmt','syntax.py',133),
  ('expression -> NUMBER','expression',1,'p_expression','syntax.py',137),
  ('expression -> ID','expression',1,'p_expression','syntax.py',138),
  ('expression -> STRING','expression',1,'p_expression','syntax.py',139),
  ('expression -> binary_op','expression',1,'p_expression','syntax.py',140),
  ('binary_op -> expression PLUS expression','binary_op',3,'p_binary_op','syntax.py',151),
  ('binary_op -> expression MINUS expression','binary_op',3,'p_binary_op','syntax.py',152),
  ('binary_op -> expression TIMES expression','binary_op',3,'p_binary_op','syntax.py',153),
  ('binary_op -> expression DIVIDE expression','binary_op',3,'p_binary_op','syntax.py',154),
  ('binary_op -> expression GT expression','binary_op',3,'p_binary_op','syntax.py',155),
  ('binary_op -> expression LT expression','binary_op',3,'p_binary_op','syntax.py',156),
  ('binary_op -> expression EQ expression','binary_op',3,'p_binary_op','syntax.py',157),
]
