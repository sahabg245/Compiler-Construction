Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> declaration
Rule 5     statement -> assignment
Rule 6     statement -> if_stmt
Rule 7     statement -> print_stmt
Rule 8     declaration -> INT ID SEMICOLON
Rule 9     declaration -> INT ID ASSIGN expression SEMICOLON
Rule 10    declaration -> STRING_KW ID ASSIGN STRING SEMICOLON
Rule 11    assignment -> ID ASSIGN expression SEMICOLON
Rule 12    if_stmt -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE
Rule 13    if_stmt -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
Rule 14    print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON
Rule 15    expression -> NUMBER
Rule 16    expression -> ID
Rule 17    expression -> STRING
Rule 18    expression -> binary_op
Rule 19    binary_op -> expression PLUS expression
Rule 20    binary_op -> expression MINUS expression
Rule 21    binary_op -> expression TIMES expression
Rule 22    binary_op -> expression DIVIDE expression
Rule 23    binary_op -> expression GT expression
Rule 24    binary_op -> expression LT expression
Rule 25    binary_op -> expression EQ expression

Terminals, with rules where they appear

ASSIGN               : 9 10 11
DIVIDE               : 22
ELSE                 : 13
EQ                   : 25
GT                   : 23
ID                   : 8 9 10 11 16
IF                   : 12 13
INT                  : 8 9
LBRACE               : 12 13 13
LPAREN               : 12 13 14
LT                   : 24
MINUS                : 20
NUMBER               : 15
PLUS                 : 19
PRINT                : 14
RBRACE               : 12 13 13
RPAREN               : 12 13 14
SEMICOLON            : 8 9 10 11 14
STRING               : 10 17
STRING_KW            : 10
TIMES                : 21
error                : 

Nonterminals, with rules where they appear

assignment           : 5
binary_op            : 18
declaration          : 4
expression           : 9 11 12 13 14 19 19 20 20 21 21 22 22 23 23 24 24 25 25
if_stmt              : 6
print_stmt           : 7
program              : 0
statement            : 2 3
statement_list       : 1 3 12 13 13

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_stmt
    (7) statement -> . print_stmt
    (8) declaration -> . INT ID SEMICOLON
    (9) declaration -> . INT ID ASSIGN expression SEMICOLON
    (10) declaration -> . STRING_KW ID ASSIGN STRING SEMICOLON
    (11) assignment -> . ID ASSIGN expression SEMICOLON
    (12) if_stmt -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (13) if_stmt -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (14) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON

    INT             shift and go to state 8
    STRING_KW       shift and go to state 10
    ID              shift and go to state 9
    IF              shift and go to state 11
    PRINT           shift and go to state 12

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if_stmt                        shift and go to state 6
    print_stmt                     shift and go to state 7

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_stmt
    (7) statement -> . print_stmt
    (8) declaration -> . INT ID SEMICOLON
    (9) declaration -> . INT ID ASSIGN expression SEMICOLON
    (10) declaration -> . STRING_KW ID ASSIGN STRING SEMICOLON
    (11) assignment -> . ID ASSIGN expression SEMICOLON
    (12) if_stmt -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (13) if_stmt -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (14) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON

    $end            reduce using rule 1 (program -> statement_list .)
    INT             shift and go to state 8
    STRING_KW       shift and go to state 10
    ID              shift and go to state 9
    IF              shift and go to state 11
    PRINT           shift and go to state 12

    statement                      shift and go to state 13
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if_stmt                        shift and go to state 6
    print_stmt                     shift and go to state 7

state 3

    (2) statement_list -> statement .

    INT             reduce using rule 2 (statement_list -> statement .)
    STRING_KW       reduce using rule 2 (statement_list -> statement .)
    ID              reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    PRINT           reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)
    RBRACE          reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> declaration .

    INT             reduce using rule 4 (statement -> declaration .)
    STRING_KW       reduce using rule 4 (statement -> declaration .)
    ID              reduce using rule 4 (statement -> declaration .)
    IF              reduce using rule 4 (statement -> declaration .)
    PRINT           reduce using rule 4 (statement -> declaration .)
    $end            reduce using rule 4 (statement -> declaration .)
    RBRACE          reduce using rule 4 (statement -> declaration .)


state 5

    (5) statement -> assignment .

    INT             reduce using rule 5 (statement -> assignment .)
    STRING_KW       reduce using rule 5 (statement -> assignment .)
    ID              reduce using rule 5 (statement -> assignment .)
    IF              reduce using rule 5 (statement -> assignment .)
    PRINT           reduce using rule 5 (statement -> assignment .)
    $end            reduce using rule 5 (statement -> assignment .)
    RBRACE          reduce using rule 5 (statement -> assignment .)


state 6

    (6) statement -> if_stmt .

    INT             reduce using rule 6 (statement -> if_stmt .)
    STRING_KW       reduce using rule 6 (statement -> if_stmt .)
    ID              reduce using rule 6 (statement -> if_stmt .)
    IF              reduce using rule 6 (statement -> if_stmt .)
    PRINT           reduce using rule 6 (statement -> if_stmt .)
    $end            reduce using rule 6 (statement -> if_stmt .)
    RBRACE          reduce using rule 6 (statement -> if_stmt .)


state 7

    (7) statement -> print_stmt .

    INT             reduce using rule 7 (statement -> print_stmt .)
    STRING_KW       reduce using rule 7 (statement -> print_stmt .)
    ID              reduce using rule 7 (statement -> print_stmt .)
    IF              reduce using rule 7 (statement -> print_stmt .)
    PRINT           reduce using rule 7 (statement -> print_stmt .)
    $end            reduce using rule 7 (statement -> print_stmt .)
    RBRACE          reduce using rule 7 (statement -> print_stmt .)


state 8

    (8) declaration -> INT . ID SEMICOLON
    (9) declaration -> INT . ID ASSIGN expression SEMICOLON

    ID              shift and go to state 14


state 9

    (11) assignment -> ID . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 15


state 10

    (10) declaration -> STRING_KW . ID ASSIGN STRING SEMICOLON

    ID              shift and go to state 16


state 11

    (12) if_stmt -> IF . LPAREN expression RPAREN LBRACE statement_list RBRACE
    (13) if_stmt -> IF . LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE

    LPAREN          shift and go to state 17


state 12

    (14) print_stmt -> PRINT . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 18


state 13

    (3) statement_list -> statement_list statement .

    INT             reduce using rule 3 (statement_list -> statement_list statement .)
    STRING_KW       reduce using rule 3 (statement_list -> statement_list statement .)
    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 3 (statement_list -> statement_list statement .)


state 14

    (8) declaration -> INT ID . SEMICOLON
    (9) declaration -> INT ID . ASSIGN expression SEMICOLON

    SEMICOLON       shift and go to state 19
    ASSIGN          shift and go to state 20


state 15

    (11) assignment -> ID ASSIGN . expression SEMICOLON
    (15) expression -> . NUMBER
    (16) expression -> . ID
    (17) expression -> . STRING
    (18) expression -> . binary_op
    (19) binary_op -> . expression PLUS expression
    (20) binary_op -> . expression MINUS expression
    (21) binary_op -> . expression TIMES expression
    (22) binary_op -> . expression DIVIDE expression
    (23) binary_op -> . expression GT expression
    (24) binary_op -> . expression LT expression
    (25) binary_op -> . expression EQ expression

    NUMBER          shift and go to state 23
    ID              shift and go to state 21
    STRING          shift and go to state 24

    expression                     shift and go to state 22
    binary_op                      shift and go to state 25

state 16

    (10) declaration -> STRING_KW ID . ASSIGN STRING SEMICOLON

    ASSIGN          shift and go to state 26


state 17

    (12) if_stmt -> IF LPAREN . expression RPAREN LBRACE statement_list RBRACE
    (13) if_stmt -> IF LPAREN . expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (15) expression -> . NUMBER
    (16) expression -> . ID
    (17) expression -> . STRING
    (18) expression -> . binary_op
    (19) binary_op -> . expression PLUS expression
    (20) binary_op -> . expression MINUS expression
    (21) binary_op -> . expression TIMES expression
    (22) binary_op -> . expression DIVIDE expression
    (23) binary_op -> . expression GT expression
    (24) binary_op -> . expression LT expression
    (25) binary_op -> . expression EQ expression

    NUMBER          shift and go to state 23
    ID              shift and go to state 21
    STRING          shift and go to state 24

    expression                     shift and go to state 27
    binary_op                      shift and go to state 25

state 18

    (14) print_stmt -> PRINT LPAREN . expression RPAREN SEMICOLON
    (15) expression -> . NUMBER
    (16) expression -> . ID
    (17) expression -> . STRING
    (18) expression -> . binary_op
    (19) binary_op -> . expression PLUS expression
    (20) binary_op -> . expression MINUS expression
    (21) binary_op -> . expression TIMES expression
    (22) binary_op -> . expression DIVIDE expression
    (23) binary_op -> . expression GT expression
    (24) binary_op -> . expression LT expression
    (25) binary_op -> . expression EQ expression

    NUMBER          shift and go to state 23
    ID              shift and go to state 21
    STRING          shift and go to state 24

    expression                     shift and go to state 28
    binary_op                      shift and go to state 25

state 19

    (8) declaration -> INT ID SEMICOLON .

    INT             reduce using rule 8 (declaration -> INT ID SEMICOLON .)
    STRING_KW       reduce using rule 8 (declaration -> INT ID SEMICOLON .)
    ID              reduce using rule 8 (declaration -> INT ID SEMICOLON .)
    IF              reduce using rule 8 (declaration -> INT ID SEMICOLON .)
    PRINT           reduce using rule 8 (declaration -> INT ID SEMICOLON .)
    $end            reduce using rule 8 (declaration -> INT ID SEMICOLON .)
    RBRACE          reduce using rule 8 (declaration -> INT ID SEMICOLON .)


state 20

    (9) declaration -> INT ID ASSIGN . expression SEMICOLON
    (15) expression -> . NUMBER
    (16) expression -> . ID
    (17) expression -> . STRING
    (18) expression -> . binary_op
    (19) binary_op -> . expression PLUS expression
    (20) binary_op -> . expression MINUS expression
    (21) binary_op -> . expression TIMES expression
    (22) binary_op -> . expression DIVIDE expression
    (23) binary_op -> . expression GT expression
    (24) binary_op -> . expression LT expression
    (25) binary_op -> . expression EQ expression

    NUMBER          shift and go to state 23
    ID              shift and go to state 21
    STRING          shift and go to state 24

    expression                     shift and go to state 29
    binary_op                      shift and go to state 25

state 21

    (16) expression -> ID .

    SEMICOLON       reduce using rule 16 (expression -> ID .)
    PLUS            reduce using rule 16 (expression -> ID .)
    MINUS           reduce using rule 16 (expression -> ID .)
    TIMES           reduce using rule 16 (expression -> ID .)
    DIVIDE          reduce using rule 16 (expression -> ID .)
    GT              reduce using rule 16 (expression -> ID .)
    LT              reduce using rule 16 (expression -> ID .)
    EQ              reduce using rule 16 (expression -> ID .)
    RPAREN          reduce using rule 16 (expression -> ID .)


state 22

    (11) assignment -> ID ASSIGN expression . SEMICOLON
    (19) binary_op -> expression . PLUS expression
    (20) binary_op -> expression . MINUS expression
    (21) binary_op -> expression . TIMES expression
    (22) binary_op -> expression . DIVIDE expression
    (23) binary_op -> expression . GT expression
    (24) binary_op -> expression . LT expression
    (25) binary_op -> expression . EQ expression

    SEMICOLON       shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    EQ              shift and go to state 37


state 23

    (15) expression -> NUMBER .

    SEMICOLON       reduce using rule 15 (expression -> NUMBER .)
    PLUS            reduce using rule 15 (expression -> NUMBER .)
    MINUS           reduce using rule 15 (expression -> NUMBER .)
    TIMES           reduce using rule 15 (expression -> NUMBER .)
    DIVIDE          reduce using rule 15 (expression -> NUMBER .)
    GT              reduce using rule 15 (expression -> NUMBER .)
    LT              reduce using rule 15 (expression -> NUMBER .)
    EQ              reduce using rule 15 (expression -> NUMBER .)
    RPAREN          reduce using rule 15 (expression -> NUMBER .)


state 24

    (17) expression -> STRING .

    SEMICOLON       reduce using rule 17 (expression -> STRING .)
    PLUS            reduce using rule 17 (expression -> STRING .)
    MINUS           reduce using rule 17 (expression -> STRING .)
    TIMES           reduce using rule 17 (expression -> STRING .)
    DIVIDE          reduce using rule 17 (expression -> STRING .)
    GT              reduce using rule 17 (expression -> STRING .)
    LT              reduce using rule 17 (expression -> STRING .)
    EQ              reduce using rule 17 (expression -> STRING .)
    RPAREN          reduce using rule 17 (expression -> STRING .)


state 25

    (18) expression -> binary_op .

    SEMICOLON       reduce using rule 18 (expression -> binary_op .)
    PLUS            reduce using rule 18 (expression -> binary_op .)
    MINUS           reduce using rule 18 (expression -> binary_op .)
    TIMES           reduce using rule 18 (expression -> binary_op .)
    DIVIDE          reduce using rule 18 (expression -> binary_op .)
    GT              reduce using rule 18 (expression -> binary_op .)
    LT              reduce using rule 18 (expression -> binary_op .)
    EQ              reduce using rule 18 (expression -> binary_op .)
    RPAREN          reduce using rule 18 (expression -> binary_op .)


state 26

    (10) declaration -> STRING_KW ID ASSIGN . STRING SEMICOLON

    STRING          shift and go to state 38


state 27

    (12) if_stmt -> IF LPAREN expression . RPAREN LBRACE statement_list RBRACE
    (13) if_stmt -> IF LPAREN expression . RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (19) binary_op -> expression . PLUS expression
    (20) binary_op -> expression . MINUS expression
    (21) binary_op -> expression . TIMES expression
    (22) binary_op -> expression . DIVIDE expression
    (23) binary_op -> expression . GT expression
    (24) binary_op -> expression . LT expression
    (25) binary_op -> expression . EQ expression

    RPAREN          shift and go to state 39
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    EQ              shift and go to state 37


state 28

    (14) print_stmt -> PRINT LPAREN expression . RPAREN SEMICOLON
    (19) binary_op -> expression . PLUS expression
    (20) binary_op -> expression . MINUS expression
    (21) binary_op -> expression . TIMES expression
    (22) binary_op -> expression . DIVIDE expression
    (23) binary_op -> expression . GT expression
    (24) binary_op -> expression . LT expression
    (25) binary_op -> expression . EQ expression

    RPAREN          shift and go to state 40
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    EQ              shift and go to state 37


state 29

    (9) declaration -> INT ID ASSIGN expression . SEMICOLON
    (19) binary_op -> expression . PLUS expression
    (20) binary_op -> expression . MINUS expression
    (21) binary_op -> expression . TIMES expression
    (22) binary_op -> expression . DIVIDE expression
    (23) binary_op -> expression . GT expression
    (24) binary_op -> expression . LT expression
    (25) binary_op -> expression . EQ expression

    SEMICOLON       shift and go to state 41
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    EQ              shift and go to state 37


state 30

    (11) assignment -> ID ASSIGN expression SEMICOLON .

    INT             reduce using rule 11 (assignment -> ID ASSIGN expression SEMICOLON .)
    STRING_KW       reduce using rule 11 (assignment -> ID ASSIGN expression SEMICOLON .)
    ID              reduce using rule 11 (assignment -> ID ASSIGN expression SEMICOLON .)
    IF              reduce using rule 11 (assignment -> ID ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 11 (assignment -> ID ASSIGN expression SEMICOLON .)
    $end            reduce using rule 11 (assignment -> ID ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 11 (assignment -> ID ASSIGN expression SEMICOLON .)


state 31

    (19) binary_op -> expression PLUS . expression
    (15) expression -> . NUMBER
    (16) expression -> . ID
    (17) expression -> . STRING
    (18) expression -> . binary_op
    (19) binary_op -> . expression PLUS expression
    (20) binary_op -> . expression MINUS expression
    (21) binary_op -> . expression TIMES expression
    (22) binary_op -> . expression DIVIDE expression
    (23) binary_op -> . expression GT expression
    (24) binary_op -> . expression LT expression
    (25) binary_op -> . expression EQ expression

    NUMBER          shift and go to state 23
    ID              shift and go to state 21
    STRING          shift and go to state 24

    expression                     shift and go to state 42
    binary_op                      shift and go to state 25

state 32

    (20) binary_op -> expression MINUS . expression
    (15) expression -> . NUMBER
    (16) expression -> . ID
    (17) expression -> . STRING
    (18) expression -> . binary_op
    (19) binary_op -> . expression PLUS expression
    (20) binary_op -> . expression MINUS expression
    (21) binary_op -> . expression TIMES expression
    (22) binary_op -> . expression DIVIDE expression
    (23) binary_op -> . expression GT expression
    (24) binary_op -> . expression LT expression
    (25) binary_op -> . expression EQ expression

    NUMBER          shift and go to state 23
    ID              shift and go to state 21
    STRING          shift and go to state 24

    expression                     shift and go to state 43
    binary_op                      shift and go to state 25

state 33

    (21) binary_op -> expression TIMES . expression
    (15) expression -> . NUMBER
    (16) expression -> . ID
    (17) expression -> . STRING
    (18) expression -> . binary_op
    (19) binary_op -> . expression PLUS expression
    (20) binary_op -> . expression MINUS expression
    (21) binary_op -> . expression TIMES expression
    (22) binary_op -> . expression DIVIDE expression
    (23) binary_op -> . expression GT expression
    (24) binary_op -> . expression LT expression
    (25) binary_op -> . expression EQ expression

    NUMBER          shift and go to state 23
    ID              shift and go to state 21
    STRING          shift and go to state 24

    expression                     shift and go to state 44
    binary_op                      shift and go to state 25

state 34

    (22) binary_op -> expression DIVIDE . expression
    (15) expression -> . NUMBER
    (16) expression -> . ID
    (17) expression -> . STRING
    (18) expression -> . binary_op
    (19) binary_op -> . expression PLUS expression
    (20) binary_op -> . expression MINUS expression
    (21) binary_op -> . expression TIMES expression
    (22) binary_op -> . expression DIVIDE expression
    (23) binary_op -> . expression GT expression
    (24) binary_op -> . expression LT expression
    (25) binary_op -> . expression EQ expression

    NUMBER          shift and go to state 23
    ID              shift and go to state 21
    STRING          shift and go to state 24

    expression                     shift and go to state 45
    binary_op                      shift and go to state 25

state 35

    (23) binary_op -> expression GT . expression
    (15) expression -> . NUMBER
    (16) expression -> . ID
    (17) expression -> . STRING
    (18) expression -> . binary_op
    (19) binary_op -> . expression PLUS expression
    (20) binary_op -> . expression MINUS expression
    (21) binary_op -> . expression TIMES expression
    (22) binary_op -> . expression DIVIDE expression
    (23) binary_op -> . expression GT expression
    (24) binary_op -> . expression LT expression
    (25) binary_op -> . expression EQ expression

    NUMBER          shift and go to state 23
    ID              shift and go to state 21
    STRING          shift and go to state 24

    expression                     shift and go to state 46
    binary_op                      shift and go to state 25

state 36

    (24) binary_op -> expression LT . expression
    (15) expression -> . NUMBER
    (16) expression -> . ID
    (17) expression -> . STRING
    (18) expression -> . binary_op
    (19) binary_op -> . expression PLUS expression
    (20) binary_op -> . expression MINUS expression
    (21) binary_op -> . expression TIMES expression
    (22) binary_op -> . expression DIVIDE expression
    (23) binary_op -> . expression GT expression
    (24) binary_op -> . expression LT expression
    (25) binary_op -> . expression EQ expression

    NUMBER          shift and go to state 23
    ID              shift and go to state 21
    STRING          shift and go to state 24

    expression                     shift and go to state 47
    binary_op                      shift and go to state 25

state 37

    (25) binary_op -> expression EQ . expression
    (15) expression -> . NUMBER
    (16) expression -> . ID
    (17) expression -> . STRING
    (18) expression -> . binary_op
    (19) binary_op -> . expression PLUS expression
    (20) binary_op -> . expression MINUS expression
    (21) binary_op -> . expression TIMES expression
    (22) binary_op -> . expression DIVIDE expression
    (23) binary_op -> . expression GT expression
    (24) binary_op -> . expression LT expression
    (25) binary_op -> . expression EQ expression

    NUMBER          shift and go to state 23
    ID              shift and go to state 21
    STRING          shift and go to state 24

    expression                     shift and go to state 48
    binary_op                      shift and go to state 25

state 38

    (10) declaration -> STRING_KW ID ASSIGN STRING . SEMICOLON

    SEMICOLON       shift and go to state 49


state 39

    (12) if_stmt -> IF LPAREN expression RPAREN . LBRACE statement_list RBRACE
    (13) if_stmt -> IF LPAREN expression RPAREN . LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE

    LBRACE          shift and go to state 50


state 40

    (14) print_stmt -> PRINT LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 51


state 41

    (9) declaration -> INT ID ASSIGN expression SEMICOLON .

    INT             reduce using rule 9 (declaration -> INT ID ASSIGN expression SEMICOLON .)
    STRING_KW       reduce using rule 9 (declaration -> INT ID ASSIGN expression SEMICOLON .)
    ID              reduce using rule 9 (declaration -> INT ID ASSIGN expression SEMICOLON .)
    IF              reduce using rule 9 (declaration -> INT ID ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 9 (declaration -> INT ID ASSIGN expression SEMICOLON .)
    $end            reduce using rule 9 (declaration -> INT ID ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 9 (declaration -> INT ID ASSIGN expression SEMICOLON .)


state 42

    (19) binary_op -> expression PLUS expression .
    (19) binary_op -> expression . PLUS expression
    (20) binary_op -> expression . MINUS expression
    (21) binary_op -> expression . TIMES expression
    (22) binary_op -> expression . DIVIDE expression
    (23) binary_op -> expression . GT expression
    (24) binary_op -> expression . LT expression
    (25) binary_op -> expression . EQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    SEMICOLON       reduce using rule 19 (binary_op -> expression PLUS expression .)
    RPAREN          reduce using rule 19 (binary_op -> expression PLUS expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    EQ              shift and go to state 37

  ! PLUS            [ reduce using rule 19 (binary_op -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 19 (binary_op -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 19 (binary_op -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 19 (binary_op -> expression PLUS expression .) ]
  ! GT              [ reduce using rule 19 (binary_op -> expression PLUS expression .) ]
  ! LT              [ reduce using rule 19 (binary_op -> expression PLUS expression .) ]
  ! EQ              [ reduce using rule 19 (binary_op -> expression PLUS expression .) ]


state 43

    (20) binary_op -> expression MINUS expression .
    (19) binary_op -> expression . PLUS expression
    (20) binary_op -> expression . MINUS expression
    (21) binary_op -> expression . TIMES expression
    (22) binary_op -> expression . DIVIDE expression
    (23) binary_op -> expression . GT expression
    (24) binary_op -> expression . LT expression
    (25) binary_op -> expression . EQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    SEMICOLON       reduce using rule 20 (binary_op -> expression MINUS expression .)
    RPAREN          reduce using rule 20 (binary_op -> expression MINUS expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    EQ              shift and go to state 37

  ! PLUS            [ reduce using rule 20 (binary_op -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 20 (binary_op -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 20 (binary_op -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 20 (binary_op -> expression MINUS expression .) ]
  ! GT              [ reduce using rule 20 (binary_op -> expression MINUS expression .) ]
  ! LT              [ reduce using rule 20 (binary_op -> expression MINUS expression .) ]
  ! EQ              [ reduce using rule 20 (binary_op -> expression MINUS expression .) ]


state 44

    (21) binary_op -> expression TIMES expression .
    (19) binary_op -> expression . PLUS expression
    (20) binary_op -> expression . MINUS expression
    (21) binary_op -> expression . TIMES expression
    (22) binary_op -> expression . DIVIDE expression
    (23) binary_op -> expression . GT expression
    (24) binary_op -> expression . LT expression
    (25) binary_op -> expression . EQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    SEMICOLON       reduce using rule 21 (binary_op -> expression TIMES expression .)
    RPAREN          reduce using rule 21 (binary_op -> expression TIMES expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    EQ              shift and go to state 37

  ! PLUS            [ reduce using rule 21 (binary_op -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 21 (binary_op -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 21 (binary_op -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 21 (binary_op -> expression TIMES expression .) ]
  ! GT              [ reduce using rule 21 (binary_op -> expression TIMES expression .) ]
  ! LT              [ reduce using rule 21 (binary_op -> expression TIMES expression .) ]
  ! EQ              [ reduce using rule 21 (binary_op -> expression TIMES expression .) ]


state 45

    (22) binary_op -> expression DIVIDE expression .
    (19) binary_op -> expression . PLUS expression
    (20) binary_op -> expression . MINUS expression
    (21) binary_op -> expression . TIMES expression
    (22) binary_op -> expression . DIVIDE expression
    (23) binary_op -> expression . GT expression
    (24) binary_op -> expression . LT expression
    (25) binary_op -> expression . EQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    SEMICOLON       reduce using rule 22 (binary_op -> expression DIVIDE expression .)
    RPAREN          reduce using rule 22 (binary_op -> expression DIVIDE expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    EQ              shift and go to state 37

  ! PLUS            [ reduce using rule 22 (binary_op -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 22 (binary_op -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 22 (binary_op -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 22 (binary_op -> expression DIVIDE expression .) ]
  ! GT              [ reduce using rule 22 (binary_op -> expression DIVIDE expression .) ]
  ! LT              [ reduce using rule 22 (binary_op -> expression DIVIDE expression .) ]
  ! EQ              [ reduce using rule 22 (binary_op -> expression DIVIDE expression .) ]


state 46

    (23) binary_op -> expression GT expression .
    (19) binary_op -> expression . PLUS expression
    (20) binary_op -> expression . MINUS expression
    (21) binary_op -> expression . TIMES expression
    (22) binary_op -> expression . DIVIDE expression
    (23) binary_op -> expression . GT expression
    (24) binary_op -> expression . LT expression
    (25) binary_op -> expression . EQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    SEMICOLON       reduce using rule 23 (binary_op -> expression GT expression .)
    RPAREN          reduce using rule 23 (binary_op -> expression GT expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    EQ              shift and go to state 37

  ! PLUS            [ reduce using rule 23 (binary_op -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 23 (binary_op -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 23 (binary_op -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 23 (binary_op -> expression GT expression .) ]
  ! GT              [ reduce using rule 23 (binary_op -> expression GT expression .) ]
  ! LT              [ reduce using rule 23 (binary_op -> expression GT expression .) ]
  ! EQ              [ reduce using rule 23 (binary_op -> expression GT expression .) ]


state 47

    (24) binary_op -> expression LT expression .
    (19) binary_op -> expression . PLUS expression
    (20) binary_op -> expression . MINUS expression
    (21) binary_op -> expression . TIMES expression
    (22) binary_op -> expression . DIVIDE expression
    (23) binary_op -> expression . GT expression
    (24) binary_op -> expression . LT expression
    (25) binary_op -> expression . EQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    SEMICOLON       reduce using rule 24 (binary_op -> expression LT expression .)
    RPAREN          reduce using rule 24 (binary_op -> expression LT expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    EQ              shift and go to state 37

  ! PLUS            [ reduce using rule 24 (binary_op -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 24 (binary_op -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 24 (binary_op -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 24 (binary_op -> expression LT expression .) ]
  ! GT              [ reduce using rule 24 (binary_op -> expression LT expression .) ]
  ! LT              [ reduce using rule 24 (binary_op -> expression LT expression .) ]
  ! EQ              [ reduce using rule 24 (binary_op -> expression LT expression .) ]


state 48

    (25) binary_op -> expression EQ expression .
    (19) binary_op -> expression . PLUS expression
    (20) binary_op -> expression . MINUS expression
    (21) binary_op -> expression . TIMES expression
    (22) binary_op -> expression . DIVIDE expression
    (23) binary_op -> expression . GT expression
    (24) binary_op -> expression . LT expression
    (25) binary_op -> expression . EQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    SEMICOLON       reduce using rule 25 (binary_op -> expression EQ expression .)
    RPAREN          reduce using rule 25 (binary_op -> expression EQ expression .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    GT              shift and go to state 35
    LT              shift and go to state 36
    EQ              shift and go to state 37

  ! PLUS            [ reduce using rule 25 (binary_op -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 25 (binary_op -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 25 (binary_op -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 25 (binary_op -> expression EQ expression .) ]
  ! GT              [ reduce using rule 25 (binary_op -> expression EQ expression .) ]
  ! LT              [ reduce using rule 25 (binary_op -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 25 (binary_op -> expression EQ expression .) ]


state 49

    (10) declaration -> STRING_KW ID ASSIGN STRING SEMICOLON .

    INT             reduce using rule 10 (declaration -> STRING_KW ID ASSIGN STRING SEMICOLON .)
    STRING_KW       reduce using rule 10 (declaration -> STRING_KW ID ASSIGN STRING SEMICOLON .)
    ID              reduce using rule 10 (declaration -> STRING_KW ID ASSIGN STRING SEMICOLON .)
    IF              reduce using rule 10 (declaration -> STRING_KW ID ASSIGN STRING SEMICOLON .)
    PRINT           reduce using rule 10 (declaration -> STRING_KW ID ASSIGN STRING SEMICOLON .)
    $end            reduce using rule 10 (declaration -> STRING_KW ID ASSIGN STRING SEMICOLON .)
    RBRACE          reduce using rule 10 (declaration -> STRING_KW ID ASSIGN STRING SEMICOLON .)


state 50

    (12) if_stmt -> IF LPAREN expression RPAREN LBRACE . statement_list RBRACE
    (13) if_stmt -> IF LPAREN expression RPAREN LBRACE . statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_stmt
    (7) statement -> . print_stmt
    (8) declaration -> . INT ID SEMICOLON
    (9) declaration -> . INT ID ASSIGN expression SEMICOLON
    (10) declaration -> . STRING_KW ID ASSIGN STRING SEMICOLON
    (11) assignment -> . ID ASSIGN expression SEMICOLON
    (12) if_stmt -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (13) if_stmt -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (14) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON

    INT             shift and go to state 8
    STRING_KW       shift and go to state 10
    ID              shift and go to state 9
    IF              shift and go to state 11
    PRINT           shift and go to state 12

    statement_list                 shift and go to state 52
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if_stmt                        shift and go to state 6
    print_stmt                     shift and go to state 7

state 51

    (14) print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .

    INT             reduce using rule 14 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    STRING_KW       reduce using rule 14 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 14 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 14 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 14 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 14 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 14 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)


state 52

    (12) if_stmt -> IF LPAREN expression RPAREN LBRACE statement_list . RBRACE
    (13) if_stmt -> IF LPAREN expression RPAREN LBRACE statement_list . RBRACE ELSE LBRACE statement_list RBRACE
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_stmt
    (7) statement -> . print_stmt
    (8) declaration -> . INT ID SEMICOLON
    (9) declaration -> . INT ID ASSIGN expression SEMICOLON
    (10) declaration -> . STRING_KW ID ASSIGN STRING SEMICOLON
    (11) assignment -> . ID ASSIGN expression SEMICOLON
    (12) if_stmt -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (13) if_stmt -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (14) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON

    RBRACE          shift and go to state 53
    INT             shift and go to state 8
    STRING_KW       shift and go to state 10
    ID              shift and go to state 9
    IF              shift and go to state 11
    PRINT           shift and go to state 12

    statement                      shift and go to state 13
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if_stmt                        shift and go to state 6
    print_stmt                     shift and go to state 7

state 53

    (12) if_stmt -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .
    (13) if_stmt -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE . ELSE LBRACE statement_list RBRACE

    INT             reduce using rule 12 (if_stmt -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    STRING_KW       reduce using rule 12 (if_stmt -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ID              reduce using rule 12 (if_stmt -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    IF              reduce using rule 12 (if_stmt -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    PRINT           reduce using rule 12 (if_stmt -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    $end            reduce using rule 12 (if_stmt -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 12 (if_stmt -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ELSE            shift and go to state 54


state 54

    (13) if_stmt -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 55


state 55

    (13) if_stmt -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE . statement_list RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_stmt
    (7) statement -> . print_stmt
    (8) declaration -> . INT ID SEMICOLON
    (9) declaration -> . INT ID ASSIGN expression SEMICOLON
    (10) declaration -> . STRING_KW ID ASSIGN STRING SEMICOLON
    (11) assignment -> . ID ASSIGN expression SEMICOLON
    (12) if_stmt -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (13) if_stmt -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (14) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON

    INT             shift and go to state 8
    STRING_KW       shift and go to state 10
    ID              shift and go to state 9
    IF              shift and go to state 11
    PRINT           shift and go to state 12

    statement_list                 shift and go to state 56
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if_stmt                        shift and go to state 6
    print_stmt                     shift and go to state 7

state 56

    (13) if_stmt -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list . RBRACE
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_stmt
    (7) statement -> . print_stmt
    (8) declaration -> . INT ID SEMICOLON
    (9) declaration -> . INT ID ASSIGN expression SEMICOLON
    (10) declaration -> . STRING_KW ID ASSIGN STRING SEMICOLON
    (11) assignment -> . ID ASSIGN expression SEMICOLON
    (12) if_stmt -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (13) if_stmt -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (14) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON

    RBRACE          shift and go to state 57
    INT             shift and go to state 8
    STRING_KW       shift and go to state 10
    ID              shift and go to state 9
    IF              shift and go to state 11
    PRINT           shift and go to state 12

    statement                      shift and go to state 13
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if_stmt                        shift and go to state 6
    print_stmt                     shift and go to state 7

state 57

    (13) if_stmt -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .

    INT             reduce using rule 13 (if_stmt -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    STRING_KW       reduce using rule 13 (if_stmt -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    ID              reduce using rule 13 (if_stmt -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    IF              reduce using rule 13 (if_stmt -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    PRINT           reduce using rule 13 (if_stmt -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    $end            reduce using rule 13 (if_stmt -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 13 (if_stmt -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 42 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 42 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 42 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 42 resolved as shift
WARNING: shift/reduce conflict for GT in state 42 resolved as shift
WARNING: shift/reduce conflict for LT in state 42 resolved as shift
WARNING: shift/reduce conflict for EQ in state 42 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 43 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 43 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 43 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 43 resolved as shift
WARNING: shift/reduce conflict for GT in state 43 resolved as shift
WARNING: shift/reduce conflict for LT in state 43 resolved as shift
WARNING: shift/reduce conflict for EQ in state 43 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 44 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 44 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 44 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 44 resolved as shift
WARNING: shift/reduce conflict for GT in state 44 resolved as shift
WARNING: shift/reduce conflict for LT in state 44 resolved as shift
WARNING: shift/reduce conflict for EQ in state 44 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 45 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 45 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 45 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 45 resolved as shift
WARNING: shift/reduce conflict for GT in state 45 resolved as shift
WARNING: shift/reduce conflict for LT in state 45 resolved as shift
WARNING: shift/reduce conflict for EQ in state 45 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 46 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 46 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 46 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 46 resolved as shift
WARNING: shift/reduce conflict for GT in state 46 resolved as shift
WARNING: shift/reduce conflict for LT in state 46 resolved as shift
WARNING: shift/reduce conflict for EQ in state 46 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 47 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 47 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 47 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 47 resolved as shift
WARNING: shift/reduce conflict for GT in state 47 resolved as shift
WARNING: shift/reduce conflict for LT in state 47 resolved as shift
WARNING: shift/reduce conflict for EQ in state 47 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 48 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 48 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 48 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 48 resolved as shift
WARNING: shift/reduce conflict for GT in state 48 resolved as shift
WARNING: shift/reduce conflict for LT in state 48 resolved as shift
WARNING: shift/reduce conflict for EQ in state 48 resolved as shift
